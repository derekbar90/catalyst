version: "3.0"

services:

  # service container
  email:
    build:
      context: ./email
    image: catalyst_email
    env_file: docker-compose.env
    networks:
      - catalyst-backend
    volumes:
      - email_vol:/app/node_modules
      - ./email:/app/:delegated #delegates speeds up mac os volumes
    command:
      - ./wait-for-it.sh
      - postgresd:5432
      - --
      - make
      - start-service
    environment:
      SERVICES: email
      EMAIL_DOMAIN: ${EMAIL_DOMAIN}
      EMAIL_API_KEY: ${EMAIL_API_KEY}
      EMAIL_PROVIDER: ${EMAIL_PROVIDER}
    links:
      - nats
      - redis
    depends_on:
      - nats
      - redis
      - postgresd

  # service container
  admin:
    build:
      context: ./admin
    container_name: admin
    image: catalyst_admin
    env_file: docker-compose.env
    networks:
      - catalyst-backend
      - catalyst-frontend
    volumes:
      - ./admin:/app:delegated #delegates speeds up mac os volumes
      - admin_vol:/app/node_modules
    command:
      - ./wait-for-it.sh
      - postgresd:5432
      - --
      - make
      - start-service
    environment:
      - ADMIN_OAUTH2_CLIENT_ID=${ADMIN_OAUTH2_CLIENT_ID}
      - ADMIN_OAUTH2_CLIENT_SECRET=${ADMIN_OAUTH2_CLIENT_SECRET}
      - HOST_NAME=${HOST_NAME}
      - SUB_PATH=admin
    links:
      - nats
      - redis
      - hydra
    depends_on:
      - nats
      - redis
      - postgresd
      - traefik
      - api
    labels:
      - "traefik.enable=true"
      - "traefik.backend=admin"
      - "traefik.port=3000"
      - "traefik.frontend.rule=Host:${HOST_NAME};PathPrefix:/admin"

  # service container
  api:
    build:
      context: ./api
    image: catalyst_api
    container_name: api
    env_file: docker-compose.env
    networks:
      - catalyst-backend
      - catalyst-frontend
    volumes:
      - ./api:/app:delegated #delegates speeds up mac os volumes
      - api_vol:/app/node_modules
    command:
      - ./wait-for-it.sh
      - postgresd:5432
      - --
      - make
      - start-service
    environment:
      SERVICES: api
      PORT: 3000
      LOGLEVEL: trace
      HYDRA_ADMIN_URL: http://hydra:4445
    links:
      - nats
      - redis
      - hydra
    depends_on:
      - nats
      - redis
      - postgresd
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.backend=api"
      - "traefik.port=3000"
      - "traefik.frontend.rule=Host:${HOST_NAME}"

  # service container
  user:
    build:
      context: ./user
    container_name: user
    image: catalyst_user
    env_file: docker-compose.env
    networks:
      - catalyst-backend
    volumes:
      - user_vol:/app/node_modules
      - ./user:/app/:delegated #delegates speeds up mac os volumes
    command:
      - ./wait-for-it.sh
      - postgresd:5432
      - --
      - make
      - start-service
    environment:
      SERVICES: user
      DB_NAME: user
    links:
      - nats
      - redis
    depends_on:
      - nats
      - redis
      - postgresd
      - traefik
      - jaeger

  # microeservices messaging hub
  nats:
    image: nats
    container_name: nats
    ports:
      - "4222:4222"
    networks:
      - catalyst-backend

  # services cache container. Services containers
  # will use this for faster response rates
  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - catalyst-backend

  # database
  postgresd:
    image: postgres:9.6
    container_name: postgresd
    restart: always
    networks:
      - catalyst-backend
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres/data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    env_file: docker-compose.env

  # router for microservices
  traefik:
    image: traefik:alpine
    container_name: traefik
    command:
      - --configFile=/traefik.toml
      - --web
      - --logLevel=INFO
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"
    networks:
      - catalyst-backend
      - catalyst-frontend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/traefik.toml:/traefik.toml
      - ./traefik/acme.json:/acme.json

  # migration container to setup postgres,
  # this usually will only migrate once
  # unless you delete ./postgres/data
  hydra-migrate:
    image: oryd/hydra:v1.0.8-alpine
    networks:
      - catalyst-backend
    environment:
      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresd:5432/${POSTGRES_DB}?sslmode=disable&max_conns=20&max_idle_conns=4
    command:
      migrate sql -e --yes
    depends_on:
      - postgresd
    restart: on-failure

  # the main hydra container providing
  # http(s)://hydra:4444(4445)
  hydra:
    image: oryd/hydra:v1.0.8-alpine
    container_name: hydra
    build:
      context: ./hydra
    links:
      - postgresd:postgresd
    depends_on:
      - postgresd
      - hydra-migrate
      - jaeger
      - traefik
    networks:
      - catalyst-backend
      - catalyst-frontend
    ports:
      # public port
      - "4444:4444"
      # public port
      - "4445:4445"
      # port for hydra token user
      - "5555:5555"
    command:
      serve all --dangerous-force-http
    env_file: docker-compose.env
    environment:
      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresd:5432/${POSTGRES_DB}?sslmode=disable&max_conns=20&max_idle_conns=4
      - LOG_LEVEL=debug
      - OAUTH2_ISSUER_URL=https://${HOST_NAME}/oauth
      - OAUTH2_CONSENT_URL=https://${HOST_NAME}/consent
      - OAUTH2_LOGIN_URL=https://${HOST_NAME}/login
      - SYSTEM_SECRET=youReallyNeedToChangeThis
      - OAUTH2_SHARE_ERROR_DEBUG=1
      - OIDC_SUBJECT_TYPES_SUPPORTED=public,pairwise
      - OIDC_SUBJECT_TYPE_PAIRWISE_SALT=youReallyNeedToChangeThis
      # - FORCE_ROOT_CLIENT_CREDENTIALS=root:secret
      #     Uncomment the following lines
      - TRACING_PROVIDER=jaeger
      - TRACING_PROVIDER_JAEGER_SAMPLING_SERVER_URL=http://jaeger:5778/sampling
      - TRACING_PROVIDER_JAEGER_LOCAL_AGENT_HOST_PORT=jaeger:6831
      - TRACING_OMIT_SQL_ARGUMENTS_FROM_SPANS=false
    restart: on-failure
    labels:
      - "traefik.enable=true"
      - "traefik.hydra.backend=oauth"
      - "traefik.hydra.port=4444" # callback
      - "traefik.hydra.frontend.rule=Host:${HOST_NAME};PathPrefixStrip:/oauth/"

  # tracing container for all tracing reporting
  # includes hydra and microservices
  jaeger:
    networks:
      - catalyst-frontend
      - catalyst-backend
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "9411:9411"
    depends_on:
      - traefik
    environment:
      - QUERY_BASE_PATH=/jaeger
    labels:
      - "traefik.enable=true"
      - "traefik.jaeger.frontend=jaeger"
      - "traefik.jaeger.port=16686"
      - 'traefik.jaeger.frontend.rule=Host:${HOST_NAME};PathPrefix:/jaeger/'

volumes:
  email_vol:
    driver: local
  admin_vol:
    driver: local
  api_vol:
    driver: local
  user_vol:
    driver: local

networks:
  catalyst-backend:
    driver: bridge
  catalyst-frontend:
    driver: bridge
