version: "3.0"

services:
  # service container
  api:
    build:
      context: ./api
    image: atom
    env_file: docker-compose.env
    networks:
      - catalyst-backend
      - catalyst-frontend
    volumes:
      - api:/app/node_modules
      - ./api:/app/:delegated #delegates speeds up mac os volumes
    command:
      - ./wait-for-it.sh
      - postgresd:5432
      - --
      - make
      - start-service
    environment:
      SERVICES: api
      PORT: 3000
      LOGLEVEL: trace
    links:
      - nats
      - redis
    depends_on:
      - nats
      - redis
      - postgresd
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.backend=api"
      - "traefik.port=3000"
      - "traefik.frontend.rule=Host:${HOST_NAME}"
      
  # service container
  user:
    build:
      context: ./user
    image: atom
    env_file: docker-compose.env
    networks:
      - catalyst-backend
    volumes:
      - user:/app/node_modules
      - ./user:/app/:delegated #delegates speeds up mac os volumes
    command:
      - ./wait-for-it.sh
      - postgresd:5432
      - --
      - make
      - start-service
    environment:
      SERVICES: user
      DB_NAME: user
    links:
      - nats
      - redis
    depends_on:
      - nats
      - redis
      - postgresd
      - traefik
      - jaeger

  # microeservices messaging hub
  nats:
    image: nats
    ports:
      - "4222:4222"
    networks:
      - catalyst-backend

  # services cache container. Services containers
  # will use this for faster response rates
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - catalyst-backend

  # database
  postgresd:
    image: postgres:9.6
    restart: always
    networks:
      - catalyst-backend
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres/data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    env_file: docker-compose.env

  # router for microservices
  traefik:
    image: traefik:alpine
    command: 
      - --configFile=/traefik.toml
      - --web
      - --logLevel=INFO 
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"
    networks:
      - catalyst-backend
      - catalyst-frontend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/traefik.toml:/traefik.toml
      - ./traefik/acme.json:/acme.json

  # migration container to setup postgres,
  # this usually will only migrate once
  # unless you delete ./postgres/data
  hydra-migrate:
    image: oryd/hydra:latest
    networks:
      - catalyst-backend
    environment:
      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresd:5432/${POSTGRES_DB}?sslmode=disable&max_conns=20&max_idle_conns=4
    command:
      migrate sql -e --yes
    depends_on:
      - postgresd
    restart: on-failure

  # the main hydra container providing 
  # http(s)://hydra:4444(4445)
  hydra:
    image: oryd/hydra:v1.0.8-alpine
    container_name: hydra
    build:
      context: ./hydra
    links:
      - postgresd:postgresd
    depends_on:
      - postgresd
      - hydra-migrate
      - jaeger
      - traefik
    networks:
      - catalyst-backend
      - catalyst-frontend
    ports:
      # public port
      - "4444:4444"
      # public port
      - "4445:4445"
      # port for hydra token user
      - "5555:5555"
    command:
      serve all --dangerous-force-http
    environment:
      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresd:5432/${POSTGRES_DB}?sslmode=disable&max_conns=20&max_idle_conns=4
      - LOG_LEVEL=debug
      - OAUTH2_ISSUER_URL=http://${HOST_NAME}:4444
      - OAUTH2_CONSENT_URL=http://${HOST_NAME}:3000/consent
      - OAUTH2_LOGIN_URL=http://${HOST_NAME}:3000/login
      - SYSTEM_SECRET=youReallyNeedToChangeThis
      - OAUTH2_SHARE_ERROR_DEBUG=1
      - OIDC_SUBJECT_TYPES_SUPPORTED=public,pairwise
      - OIDC_SUBJECT_TYPE_PAIRWISE_SALT=youReallyNeedToChangeThis
      - FORCE_ROOT_CLIENT_CREDENTIALS=root:secret
      #     Uncomment the following lines
      - TRACING_PROVIDER=jaeger
      - TRACING_PROVIDER_JAEGER_SAMPLING_SERVER_URL=http://jaeger:5778/sampling
      - TRACING_PROVIDER_JAEGER_LOCAL_AGENT_HOST_PORT=jaeger:6831
      - TRACING_OMIT_SQL_ARGUMENTS_FROM_SPANS=false
    restart: on-failure
    labels:
      - "traefik.enable=true"
      - "traefik.hydra.backend=oauth"
      - "traefik.hydra.port=4444" # callback
      - "traefik.hydra.frontend.rule=Host:${HOST_NAME};PathPrefixStrip:/oauth/"

  # tracing container for all tracing reporting
  # includes hydra and microservices
  jaeger:
    networks: 
      - catalyst-frontend
      - catalyst-backend
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "9411:9411"
    depends_on:
      - traefik
    environment:
      - QUERY_BASE_PATH=/jaeger
    labels:
      - "traefik.enable=true"
      - "traefik.jaeger.frontend=jaeger"
      - "traefik.jaeger.port=16686"
      - 'traefik.jaeger.frontend.rule=Host:${HOST_NAME};PathPrefix:/jaeger/'
  
  prometheus:
    image: prom/prometheus:v2.1.0
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    depends_on:
      - cadvisor
    networks:
      - catalyst-backend
    restart: always

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - catalyst-backend
    restart: always

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      - catalyst-backend
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8085:8080
    networks:
      - catalyst-backend
    restart: always

  grafana:
    image: grafana/grafana
    user: "104"
    depends_on:
      - prometheus
      - traefik
    ports:
      - 3005:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana.env
    links:
      - prometheus:prometheus
    networks:
      - catalyst-backend
      - catalyst-frontend
    restart: always
    environment:
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s/grafana
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Path:/grafana/"
      - "traefik.port=3000"
      - "traefik.frontend.rule=Host:${HOST_NAME};PathPrefixStrip:/grafana"
      - 'traefik.frontend.redirect.entryPoint=https'

volumes:
  api:
    driver: local
  user:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  catalyst-backend:
    driver: bridge
  catalyst-frontend:
    driver: bridge
